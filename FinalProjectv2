
def checkScalar(S):
    '''
    A check function for scalars in my functions that I can call to easily instead of writing it
    each time. It works by just checking if the scalar is in fact a number.
    :param S:
    :return:
    '''
    status = True
    if((type(S)!= int) and (type(S)!= float) and (type(S))!= complex):
        status = False
        return ("invalid Input for scalar")
    if status == True:
        return True
def checkVector(V):
    '''
    Like the checkScalar this function works the same checking if every element in V
    is a number.
    :param V:
    :return:
    '''
    status = True
    for i in range(len(V)):
        if((type(V[i])!=int) and ((type(V[i])!=float) and ((type(V[i]))!=complex))):
            status = False
            return ("invalid input for vector")
    if status == True:
        return True
def checkMatrix(M):
    '''
    Like the above two, this checks every element in the matrix to make sure it is full
    of numbers and nothing else. Otherwise it outputs what kind of invalid input it is
    :param M:
    :return:
    '''
    status = True
    for i in range(len(M)):
        for j in range(len(M[0])):
            if((type(M[i][j]) != int) and ((type(M[i][j]))!=float) and ((type(M[i][j]))!=complex)):
                status = False
            return ("invalid input for matrix")
    if status == True:
        return True

def checkVecLen(M,N):
    '''
    This function checks the lengths of two vectors to make sure they are the same length.
    :param M:
    :param N:
    :return:
    '''

    status = True
    if (len(M) != len(N)):
        status = False
        return ("invalid input for vector lengths")
    if status == True:
        return True

def checkMatLen(M,N):
    '''
    This function checks the rows of M and columns of N to make sure that can be multiplied
    together without error.
    :param M:
    :param N:
    :return:
    '''
    status = True
    if (len(M[0]) != len(N[0])):
        status = False
        print('invalid input for matrix lengths')
    if status == True:
        return True

def twoNorm(vector):
  '''
  twoNorm takes a vector as it's argument. It then computes the sum of  the squares of each element of the vector. It then returns the square root of this sum.
  '''
  # This variable will keep track of the validity of our input.
  inputStatus = True
  # This for loop will check each element of the vector to see if it's a number.
  for i in range(len(vector)):
    if ((type(vector[i]) != int) and (type(vector[i]) != float) and (type(vector[i]) != complex)):
      inputStatus = False
      return ("Invalid Input")
  # If the input is valid the function continues to compute the 2-norm
  if inputStatus == True:
    result = 0
# This for loop will compute the sum of the squares of the elements of the vector.
    for i in range(len(vector)):
      result = result + (vector[i]**2)
    result = result**(1/2)
    return result
def normalize(vec07):
    '''
    This function takes a vector and searches through its index until it finds the largest absolute value number in it, large,
    it does this by going through the range of vec07 and checking every i against large until large is equal to the biggest number.
    It then takes that number and it divides the numbers n in vec07 by the absolute value of large and return those values, such that
    we get the normalized vector.
    :param vec07: vector
    :return: vector
    '''
    #I copied and pasted the above code
    if checkVector(vec07) == True:
        large = 0 # The dummy variable
        for i in range(len(vec07)):
            if abs(vec07[i]) > abs(large): # Where it searches through the vector till large is the largest
                large = vec07[i]

            return [n/abs(large) for n in vec07] # Here is where you take the elements in vec07, n here, and divide it indivually by abs(large) that we got above.
    else:
        return 'Not a valid input'
def dot(vec01,vec02):
    '''
    This function dot takes two vectors as its arguments then checks to see if they are of compatible dimensions. It then
    takes the first vector and multiples it to the second vector. This outputs is equal to total in my code. If
    the two vectors are not of compatible dimensions then it will output Invalid input. The inputs are vec01,vec02 and
    the output is total.
    '''

    n = len(vec01)
    m = len(vec02)
    #I take the length of both vectors because I need to know if the lengths are equal
    if checkVecLen(vec01,vec02) == True:
        total = [[0]*len(vec02) for i in range(m)]
        for i in range(m):
            for i in range(n):
                total = vec01[i]*vec02[i] #you take the += because it outputs the sum of the multiplication for all elements i
        print (total)
        return total


def scalarVecMulti(scalar,vec05):
    '''
    This function takes two inputs, scalar and vec05, then finds the length of vec05 since it is the length we need to multiply
    the scalar on. Then it sets the multiplication back to vec05[i], which makes it so that every i is equal to that scalar*i for every i in n.
    This will then output the new vec05.
    '''
    n = len(vec05)
    result = vec05
    print(vec05)
    for i in range(n):
        print(result[i])
        print(scalar)
        result[i] = scalar * result[i]  # here the scalar is multiplied to the vector through each element i in the vectors range.

    return result


def vecSubtract(vec03,vec04):
    '''
    This function takes two vectors vec03 and vec04, then it will subtract the first vector by the second vector
    and this will be set to be vec03 for every i then it will output vec03. This goes over the range of n which is the length
    of the vectors.
    '''

    n = len(vec03) #the two variables to check if the length is the same
    m = len(vec04)

    if checkVecLen(vec03,vec04) == True:

        for i in range(n):

            vec03[i] = vec03[i] - vec04[i] #subtracting vec04 from vec03, you use i to go through all of the elements in both vectors
        return vec03
    else:
        return ('invalid input')

def qrFact(mat01):
    '''
    This function takes a Matrix as its argument and then sets the resultQ and resultR to the
    length of the matrix. Then it sets V to matrix so that it is the same size as well, then it goes through the
    other functions we have, such as twoNorm to get the sum of the V[i], then it is normalizing it with
    normalize. Then it will continute until n, where j = i+1 so that it is increasing until it reaches the
    length of matrix, during this loop it will take the dot product of the resultQ we got in the for loop
    before and V[j] which is the new column we are looking at. It will then set a scalarVecMulti of
    resultR[j][i] and resultQ[i] so that we get the projection. then it will subtract through vecSubtract
    the new column, V[j] and temp. This will give us resultQ and resultR which is what we need for
    the QR factorization
    :param mat01:
    :return:
    '''


    n = len(mat01[0])
    m = len(mat01)

    resultQ = [[0]*(m) for i in range(n)]
    resultR = [[0]*(n) for i in range(n)]
    V = A
    for i in range(n):

        resultR[i][i] = twoNorm(V[i])
        resultQ[i] = normalize(V[i])

        for j in range(i+1,n):

            resultR[j][i] = dot(resultQ[i],V[j])

            temp = scalarVecMulti(resultR[j][i],resultQ[i])

            V[j] = vecSubtract(V[j],temp)
    return [resultQ,resultR]
def matVec(matrix,vector):

    n = len(matrix)
    m = len(vector)
    p = len(vector[0])
    Qy = [[0] * n for row in range(m)] # This sets up the size of the end matrix.

    if checkMatLen(matrix,vector) == True:
        #setting all of the variables and setting C equal to the size of the vector
        for i in range(n): #goes through all of the matrix for the rows of the matrix
            for j in range(p): #goes through all of the vector for every row in the vector
                Qy_ij = [[0]*n for row in range(m)] #setting c_ij to 0

                for k in range(m): #goes through all of the vector for every column, which since its a vector is 1


                    Qy =  matrix[i][j]*vector[j][k]  #the multiplication of the matrix and vector


        return Qy



def backSub(R):
    R = qrFact(A[1])
    b = matVec(qrFact(A[0]),y)
    k = len(b) - 1
    c = [[0]*len(b) for i in range(b)]
    c[k] = b[k]/R[k][k]
    for i in reversed(range(len(b))):
        c[i]= b[i]
        for j in range(i+1,len(b)):
            c[i] = c[i] - c[j]*R[j][i]
            c[i] = c[i]/R[i][i]
    return C

x = [.55,.60,.65,.70,.75,.80,.85,.9,.95,1]
y = [1.102,1.099,1.017,1.111,1.117,1.152,1.265,1.380,1.575,1.857]

A = [[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],[x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],x[9]],[x[0]**2,x[1]**2,x[2]**2,x[3]**2,x[4]**2,x[5]**2,x[6]**2,x[7]**2,x[8]**2,x[9]**2],[x[0]**3,x[1]**3,x[2]**3,x[3]**3,x[4]**3,x[5]**3,x[6]**3,x[7]**3,x[8]**3,x[9]**3]]
matrix1 = [0,1,0]
matrix2 = [[1,1],[1,1]]

print(A) #A
print(qrFact(A)) #Q,R
#print(scalarVecMulti(A,y))
#print(checkVecLen(A,matVec(A,y)))

#print(matVec(A,[y]))   #Q*y should print out a 4x1, however says that it is out of index

print(backSub(A)) #C
#print (checkMatLen([x],[y]))
#print (len(matrix1))
#print (len(matrix1[0]))
#print (len(matrix2))
#print (len(matrix2[0]))
#print (checkMatLen(matrix1,matrix2))
#print (matVec(matrix1,matrix2))
